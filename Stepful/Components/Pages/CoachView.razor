@page "/coach"
@using StepfulLib
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ICoachService CoachService

<PageTitle>Coach</PageTitle>
<h1>Coach View</h1>

<div>
    @if (SelectedCoach != null)
    {

        <select @onchange="ChangeCoach">
            @foreach (var item in Coaches)
            {
                <option value="@item.FullName">@item.FullName</option>
            }
        </select>
    }
</div>
<hr />

@if (SelectedCoach == null)
{
    <h3>No Coach Selected.</h3>
}
else
{
    <h4>@SelectedCoach.FullName Slots:</h4>

    @if (SelectedCoach.Calendar != null)
    {
        <p><b>Open Slots:</b></p>
        <ol>
            @foreach (TimeSlot tslot in SelectedCoach.Calendar)
            {
                if (tslot.IsOpen)
                {
                    <li>@tslot.StartTime.ToLocalTime()</li>
                }
            }
        </ol>

        <br />

        <p><b>Booked Slots:</b></p>
        <ol>
            @foreach (TimeSlot tslot in SelectedCoach.Calendar)
            {
                if (!tslot.IsOpen)
                {
                    <li>@tslot.StartTime.ToLocalTime() with @tslot.PeerUserFullName at @tslot.PeerPhone

                        </li>
                }
            }
        </ol>
    }
    else
    {
        <p>No Slots in System.</p>
    }


}

@if (SelectedCoach != null)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Pick a Date &amp; Time</h5>
            <p class="card-text">

                <div class="wrapper">
                    <section class="createevent">
                        <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <p>
                                    <input id="txtDate" type="date" required @bind-value="TimeSample.Date" />
                                    <ValidationMessage For="@(() => TimeSample.Date)" />

                                    <input id="txtTime" type="time" required @bind="TimeSample.Time" />
                                    <ValidationMessage For="@(() => TimeSample.Time)" />
                                </p>
                            </div>
                        </EditForm>
                    </section>
                </div>
                <a class="btn btn-primary" @onclick="CreateSlot">Add Slot</a>
            </p>
        </div>
    </div>
}

@* <Button class="btn btn-primary" Clicked="@(()=>snackbar.Show())">Say Hello!</Button> *@

<Snackbar @ref="snackbar">
    <SnackbarBody>
        Hello!
    </SnackbarBody>
</Snackbar>




@code {
    private Coach SelectedCoach { get; set; }
    private List<Coach> Coaches { get; set; }

    Snackbar snackbar;

    private EditContext EditContext;


    public TimeSample TimeSample { get; set; }



    private void ChangeCoach(ChangeEventArgs e)
    {
        var selectedString = e.Value.ToString();
        foreach (Coach c in Coaches)
        {
            if (string.Equals(c.FullName, selectedString))
            {
                SelectedCoach = c;
                break;
            }
        }
    }

    private void HandleValidSubmit()
    {
    }

    protected void HandleInvalidSubmit()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        TimeSample = new TimeSample()
        {
            Date = DateTime.Today,
            Time = DateTime.Now
        };
        TimeSample.Time = TimeSample.Time.AddSeconds(-TimeSample.Time.Second);       // Set to 0 seconds


        EditContext = new EditContext(TimeSample);

        var x = await CoachService.GetAllAsync();
        Coaches = x.OrderBy(x => x.FullName).ToList();
        if (Coaches != null && Coaches.Count > 0)
        {
            SelectedCoach = Coaches[0];
        }
    }

    // TBD Verify Algo
    private void CreateSlot()
    {
        TimeSample.Date = TimeSample.Date.Date + TimeSample.Time.TimeOfDay;
        TimeSample.Time = TimeSample.Date;
        DateTime slot = TimeSample.Date;            // New var, to not affect UI Data Binding
        slot = slot.ToUniversalTime();
        var result = CoachService.AddSlot(SelectedCoach, slot);
        if (result == null)
        {
            JS.InvokeVoidAsync("alert", "Conflict. Time Slots must have a 2 hour gap.");
        }
    }

}