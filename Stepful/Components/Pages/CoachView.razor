@page "/coach"
@using StepfulLib
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ICoachService CoachService

<PageTitle>Coach</PageTitle>
<h1>Coach View</h1>

<div>
    @if (SelectedCoach != null)
    {

        <select @bind="SelectedCoach.FullName">
            @foreach (var item in Coaches)
            {
                <option value="@item.FullName">@item.FullName</option>
            }
        </select>
    }
</div>
<hr />

@if (SelectedCoach == null)
{
    <h3>No Coach Selected.</h3>
}
else
{
    <h4>@SelectedCoach.FullName Slots:</h4>

    @if (SelectedCoach.Calendar != null)
    {
        <ol>
            @foreach (TimeSlot tslot in SelectedCoach.Calendar)
            {
                <li>@tslot.StartTime</li>
            }
        </ol>
    }
    else
    {
            <p>No Slots in System.</p>
    }


}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Pick a Date &amp; Time</h5>
        <p class="card-text">

            <div class="wrapper">
                <section class="createevent">
                    <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <p>
                                <input id="txtDate" type="date" required @bind-value="TimeSample.Date" />
                                <ValidationMessage For="@(() => TimeSample.Date)" />

                                <input id="txtTime" type="time" required @bind="TimeSample.Time" />
                                <ValidationMessage For="@(() => TimeSample.Time)" />
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>



        </p>
        <a class="btn btn-primary" @onclick="CreateSlot">Add Slot</a>
    </div>
</div>

<Button Clicked="@(()=>snackbar.Show())">Snackbar</Button>

<Snackbar @ref="snackbar">
    <SnackbarBody>
        Single line of text directly related to the operation performed
    </SnackbarBody>
</Snackbar>

   


@code {
        private Coach SelectedCoach { get; set; }
        private List<Coach> Coaches { get; set; }

        Snackbar snackbar;

        private EditContext EditContext;
        private TimeSample TimeSample = new TimeSample() { Date = DateTime.Today, Time=DateTime.Now };

    private void HandleValidSubmit()
    {
    }

    protected void HandleInvalidSubmit()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(TimeSample);

        var x = await CoachService.GetAllAsync();
        Coaches = x.ToList();
        SelectedCoach = Coaches[0];
    }
    private void CreateSlot()
    {
        DateTime slot = TimeSample.Date.Date + TimeSample.Time.TimeOfDay;
        CoachService.AddSlot(SelectedCoach, slot);
    }

}